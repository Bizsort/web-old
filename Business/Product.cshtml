@{
    Layout = "~/Product/_View.cshtml";
}

@section head {
<script src="~/JS/External/jquery.rateit.js" type="text/javascript"></script>
<script type="text/javascript">
    Page = new (Product.View.extend({
        ctor: function () {
            this.ApplicationPage = "/Business/Product";
            Product.View.prototype.ctor.call(this);
            this.options = new Controls.Product.Option.View();
            this.availability = new Controls.Product.Availability.View();
            this.reviewPager = new Foundation.List.Pager();
            this.reviewListView = new Controls.Review.ListView();
            this.reviewList = new Foundation.Controls.List.PagingContainer(this.reviewPager, this.reviewListView);
            this.reviewList.Entity = "@Resource.Dictionary.review_s";
            this.reviewList.EmptyHeaderTemplate.Format("@Resource.Global.Reviews_EmptyHeaderFormat");
            this.reviewList.EmptyHeaderTemplate.ConverterParameter("{{:Entity}}|<span data-link=\"Product\"></span>");

            //actions
            this.reviewForm = new Controls.Review.Form();
            this.review = new Controls.Action.Interaction(this.reviewForm);
            this.review.Text("@Resource.Global.Review_Action");
            this.review.ExercisedText = "@Resource.Global.Review_Submitted";

            $.views.helpers({
                dateFormatter: Foundation.ValueConverter.DateFormatter
            });
        },

        Initialize: function (options) {
            var $this = this;

            //Will call EvaluateActions
            Product.View.prototype.Initialize.call(this, options);

            var reviewsTab = new Foundation.Controls.Layout.TabItem($('<div id="reviews"></div>'));
            reviewsTab.Header = "<span>@Resource.Dictionary.Reviews</span>";
            this.productTabs.AddTab(reviewsTab);

            this.reviewPager.PopulatePage = function (page, selected) {
                var header;
                if (page && page.length > 0) {
                    User.Service.Interaction.Review.ToPreview($this._token.AccountId, $this._token.ProductId, page, function (reviews) {
                        $this.reviewList.View.Populate(Foundation.List.View.prototype.preparePage.call($this, page, reviews, null, null, $this.reviewPager));
                        $this.reviewPager.CanChangePage(true);
                    });
                    header = new Foundation.Controls.List.Header.Data({ FromRecord: $this.reviewPager.FromRecord, ToRecord: $this.reviewPager.ToRecord, TotalCount: $this.reviewPager.ItemCount, Entity: $this.reviewList.Entity/*, Format: $this.reviewList.HeaderFormat*/ });
                }
                else {
                    $this.reviewList.View.Populate(null);
                    var header = new Foundation.Controls.List.Header.Data({ Entity: $this.reviewList.Entity, TotalCount: 0/*, Format: $this.reviewList.EmptyHeaderFormat*/ });
                }
                //Product may not have loaded
                if ($this.Product)
                    header.Product = $this.Product.Master.Title;
                $this.reviewList.Header(header);
            };

            this.reviewForm.Submit = function () {
                $this.review.Exercised(true);
                if ($this.reviewForm.reviewId > 0)
                    $this.reviewPager.RefreshPage();
                else
                    $this.populateReviews();
            };

            this.reviewList.Initialize($('#reviews'));
            this.reviewList.View.EditCommand = function (review) {
                $this.reviewForm.Populate($this, review.Id);
                $this.reviewForm.Show();
            };
        },

        ReflectUser: function () {
            Product.View.prototype.ReflectUser.call(this);
            if (this.Product) {
                this.reviewPager.RefreshPage();
                if (this.reviewForm.$container)
                    this.reviewForm.Reset();
            }
        },

        AddActions: function () {
            this.actionPanel.Add(this.messageAction);
            this.actionPanel.Add(this.personalLists);
            this.actionPanel.Add(this.review);
            this.actionPanel.Add(this.communities);
            this.actionPanel.Add(this.release);
            this.actionPanel.Add(this.report);
        },

        ValidateRequest: function (token) {
            if (token.AccountType == Model.AccountType.Business && token.ProductId > 0 && token.Action == Model.Session.Action.ProductView) {
                return true;
            }
            else
                return false;
        },

        Load: function () {
            var $this = this;
            User.Service.Business.Product.View(this._token.AccountId, this._token.ProductId, function (businessProduct) {
                var business = businessProduct;
                var product = businessProduct.Entity;
                Foundation.Page.prototype.ReflectTitle.call($this, [product.Master.Title, String.format("@Resource.Global.X_Ads", business.Name)]);

                var bizsrtUrl = Navigation.Main.Href($this._token, {
                    baseUri: (business.Country === "United States" ? "https://www.bizsort.com/company-product" : "https://www.bizsort.ca/company-product"),
                    bizsrtAction: 22,
                    bizsrtProps: {
                        'AccountType': 3,
                        'AccountId': 4,
                        'ProductId': 5
                    }
                });
                $('#bizsrt').attr('href', bizsrtUrl).text(business.Country === "United States" ? "Bizsort.com" : "Bizsort.ca");
                canonicalLink(bizsrtUrl);

                Product.View.prototype.populate.call($this, product, business);
                $this.populateReviews();

                if (product.Options && product.Options.length > 0) {
                    var populateOptions = function (currency) {
                        for (var o = 0; o < product.Options.length; o++)
                            for (var v = 0; v < product.Options[o].Values.length; v++)
                                product.Options[o].Values[v].Price.Currency = currency;
                        $this.options.Populate(product.Options, $('#options'));
                    };
                    //User.Service.Master.Dictionary.GetItem(Model.DictionaryType.Currency, product.Price.Currency, populateOptions);
                    populateOptions(product.Price.Currency);
                }
                $this.availability.Populate(product.Locations, $('#availability'));

                var reviewHeader = $this.reviewList.Header();
                if (reviewHeader)
                    $.observable(reviewHeader).setProperty('Product', product.Master.Title);

                $this.reviewForm.Populate($this, business, { Id: product.Id, Name: product.Master.Title });
                if (product.Status != Model.Product.Status.Active)
                    $this.review.State(Foundation.Controls.Action.State.Hidden);

                if (business.ProductsView == Model.Business.ProductsView.ProductCatalog)
                    $('#viewCatalog').show();
            }, jQuery.proxy(this.handleEntityFetchError, this));
        },

        populateReviews: function () {
            var $this = this;
            User.Service.Business.Product.GetReviews($this._token.AccountId, $this._token.ProductId, function (reviews) {
                $this.reviewPager.Populate({ Series: reviews }, 0);
            });
        },

        onCommand: function (command) {
            switch (command) {
                case "ViewCatalog":
                    Navigation.Business.CatalogView(this._token.AccountId);
                    break;
                default:
                    Product.View.prototype.onCommand.call(this, command);
                    break;
            }
        }
    }))();
</script>}

@section bizsrt {
<tr>
    <td style="text-align:center; color:firebrick; padding-bottom:5px;">This page has moved to the new <a id="bizsrt" href="https://www.bizsort.ca" style="color: blue;">Bizsort</a> web site.</td>
</tr>}

@section context {
<tr>
    <td style="padding-bottom:5px;">
        <a class="href accountName" data-command="ViewAccount"></a>&nbsp;&gt;&nbsp;<a class="href" data-command="ViewProducts">@Resource.Dictionary.Products</a>&nbsp;&gt;&nbsp;<span class="name"></span>
    </td>
</tr>}

@section centerFrame {
<table class="attributes" id="productAttributes">
    <tr>
        <td class="label" style="vertical-align:top;">@Resource.Dictionary.Type</td>
        <td class="values">
            <table>
                <tr>
                    <td class="value" id="type"></td>
                </tr>
                @*<tr>
                    <td class="value" id="side"></td>
                </tr>*@
            </table>
        </td>
    </tr>
    <tr>
        <td class="label">@Resource.Dictionary.Price</td>
        <td class="value" id="price"></td>
    </tr>
    <tr id="attributes" style="display:none;"></tr>
    <tr id="options" style="display:none;"></tr>
    <tr id="address" style="display:none;" itemprop="address" itemscope itemtype="http://schema.org/PostalAddress"></tr>
    <tr id="availability" style="display:none;"></tr>
</table>}

@section profile {
<a class="href" data-command="ViewProducts">@Resource.Business.Products_All</a>
<a class="href" id="viewCatalog" data-command="ViewCatalog" style="display:none;">@Resource.Business.Catalog_View</a>}
