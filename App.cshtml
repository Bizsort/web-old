@{
    Page.Application = true;
    Page.Title = Resource.Global.Adscroll;
    Layout = "~/_AdScrl.cshtml";
    var initParams = new List<string>();
    //Existense of Handoff is key to new session handling, explicit flag would prevent us from enabling "Conditional GET, return 304 NotModified"
    /*if (Page.SessionRequired != null)
    {
        initParams.Add("SessionRequired=True");
    }
    else if (Page.SessionRequiredNew != null)
    {
        initParams.Add("SessionRequiredNew=True");
    }*/
    var settings = Newtonsoft.Json.JsonConvert.SerializeObject(Settings.Instance);
    if (!String.IsNullOrWhiteSpace(settings))
    {
        //HttpUtility.UrlEncode uses '+' instead of '%20' for spaces in strings
        initParams.Add(String.Format("Settings={0}", Uri.EscapeDataString(settings)));
    }
    bool cors = !String.IsNullOrWhiteSpace(Settings.Instance.Service.Origin);
    var domain = Request.Url.DnsSafeHost != "localhost" ? "; domain=." + Request.Url.DnsSafeHost : String.Empty;
}
@*<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" >
<head runat="server">*@
@section head 
{
    <style type="text/css">
        html, body {
	        height: 100%;
	        overflow: hidden;
        }
        body {
	        padding: 0;
	        margin: 0;
        }
        #silverlightControlHost {
	        height: 100%;
	        text-align:center;
        }
    </style>
    <script type="text/javascript" src="Silverlight.js"></script>
    @*Not tested<script src="http://maps.googleapis.com/maps/api/js?key=AIzaSyD-24GCNOxOz5iq1_SmYK5sgHPpAgnwZos" type="text/javascript"></script>*@
    <script src="http://maps.googleapis.com/maps/api/js" type="text/javascript"></script>
    <script src="~/JS/Common/Geocoder.js" type="text/javascript"></script>
    <script type="text/javascript">

        @if (cors)
        {
            <text>jQuery.support.cors = true;</text>@*Required for IE*@
        }

        function onSilverlightError(sender, args) {
            var appSource = "";
            if (sender != null && sender != 0) {
                appSource = sender.getHost().Source;
            }

            var errorType = args.ErrorType;
            var iErrorCode = args.ErrorCode;

            if (errorType == "ImageError" || errorType == "MediaError") {
                return;
            }

            var errMsg = "Unhandled Error in Silverlight Application " +  appSource + "\n" ;

            errMsg += "Code: "+ iErrorCode + "    \n";
            errMsg += "Category: " + errorType + "       \n";
            errMsg += "Message: " + args.ErrorMessage + "     \n";

            if (errorType == "ParserError") {
                errMsg += "File: " + args.xamlFile + "     \n";
                errMsg += "Line: " + args.lineNumber + "     \n";
                errMsg += "Position: " + args.charPosition + "     \n";
            }
            else if (errorType == "RuntimeError") {
                if (args.lineNumber != 0) {
                    errMsg += "Line: " + args.lineNumber + "     \n";
                    errMsg += "Position: " +  args.charPosition + "     \n";
                }
                errMsg += "MethodName: " + args.methodName + "     \n";
            }

            throw new Error(errMsg);
        };

        @*Service.Geocoder.Stringify*@
        Session = {
            Enabled: window.sessionStorage ? true : false,
            Storage: window.sessionStorage
        };

        @*Could handoff via storage, but would need to review SessionExists and service logic
            function getSessionCookie() {
                var sessionCookie;
                if (Session.Enabled) {
                    sessionCookie = Session.Storage.getItem("@Settings.Instance.Session.HandoffCookieName");
                    if(sessionCookie)
                        Session.Storage.removeItem("@Settings.Instance.Session.HandoffCookieName");
                }
                return sessionCookie;
            }*@

        $(window).on("beforeunload", function () { //window.onbeforeunload = won't work in FF
            try {
                var sessionHandoff = sl.Content.Window.OnBeforeUnload(Session.Enabled);
                @*Could handoff via storage, but would need to review SessionExists and service logic
                    if(Session.Enabled && sessionHandoff)
                        Session.Storage.setItem("@Settings.Instance.Session.HandoffCookieName", sessionHandoff);*@
            }
            catch (e) {
                console.error(errorMessage(e));
            }
        });

        $(window).on("unload", function () {
            try {
                var sessionExit = sl.Content.Window.Unload();
                if (sessionExit) {
                    ajaxSettings = JSON.parse(sessionExit);
                    ajaxSettings.type = 'POST';
                    //ajaxSettings.dataType = 'jsonp',
                    //ajaxSettings.timeout = 5000, //if jsonp is used to allow cross-domain - should also set timeout, otherwise faultCallback may not get called
                    ajaxSettings.dataType = 'json';
                    ajaxSettings.contentType = 'application/json';
                    ajaxSettings.async = false; //called from window.unload (IE and FF seem fine without it but not Chrome)
                    ajaxSettings.data = JSON.stringify(ajaxSettings.data);
                    ajaxSettings.callback = function (response) {
                        @*Delete HandoffCookie if session wasn't found, was found and closed and can't be re-entered
                        Caveats
                        2. When the page navigated to is retrieved from browser cache (304, Back button, etc) it may have already validated the session
                        but we should not delete the cookie as it may not have yet entered it (Chrome)
                        1. When session cookie is left behind when browser window is closed and new window if opened whithin timeout window it will try to re-enter the session instead of creating a new one*@
                        if ((response === 1/*Model.Session.ExitResponse.Closed*/ && (Settings.Session.Handling & Model.Session.HandlingType.ReenterClosed) == 0) ||
                            response === 0/*Model.Session.ExitResponse.NotFound*/) {
                            if(window.sessionStorage)
                                window.sessionStorage.removeItem('@Settings.Instance.Session.HandoffCookieName');
                            var expires = new Date();
                            expires.setDate(expires.getDate() - 1);
                            document.cookie = '@Settings.Instance.Session.HandoffCookieName=; expires=' + expires.toUTCString() + '; path=/@domain'; //(new Date(0)).toUTCString()
                        }
                    }
                    jQuery.ajax(ajaxSettings);
                }
            }
            catch (e) {
                console.error(errorMessage(e));
            }
        });

        function pluginLoaded(sender, args) {
            sl = sender.getHost();
            sl.focus();
        };

        @*Service.Geocoder.Stringify*@
        Settings = {
            Location: {
                Address1Threshold: @Settings.Instance.Location.Address1Threshold
            }
        };

        var Geocoder = {
            callback: function (location) {
                try {
                    sl.Content.Geocoder.Callback(location);
                }
                catch (e) {
                    console.error(errorMessage(e));
                }
            }
        };

        var Geocode = function (json, callback, faultCallback) {
            if (json && callback) {
                var input = JSON.parse(json);
                if (!$.isEmptyObject(input)) {
                    var address;
                    if (input.Text) {
                        address = input.Text;
                    }
                    else if (input.Address) {
                        address = Service.Geocoder.Stringify(input.Address);
                    }

                    if (address) {
                        Service.Geocoder.Geocode(address, function (output) {
                            if (!$.isEmptyObject(output))
                                callback(JSON.stringify(output));
                        }, faultCallback);
                    }
                }
            }
        };

        var FacebookLogin = function (callback, faultCallback) {
            if (callback) {
                Service.Facebook.Login(function (output) {
                    if (!$.isEmptyObject(output))
                        callback(JSON.stringify(output));
                }, faultCallback);
            }
        };

        var FacebookLoginStatus = function (callback, faultCallback) {
            if (callback) {
                Service.Facebook.LoginStatus(function (output) {
                    if (!$.isEmptyObject(output))
                        callback(JSON.stringify(output));
                }, faultCallback);
            }
        };

        var FacebookAccountInfo = function (callback, faultCallback) {
            if (callback) {
                Service.Facebook.AccountInfo(function (output) {
                    if (!$.isEmptyObject(output))
                        callback(JSON.stringify(output));
                }, faultCallback);
            }
        };

        var ReflectFragment = function (pageUri) {
            location.replace(Settings.WebSite.NavToken.FragmentPrefix + pageUri);  //won't add to history
        };

        acceptTerms = function () {
            try {
                if (sl.Content.Terms)
                    sl.Content.Terms.Accept();
            }
            catch (e) {
                console.error(errorMessage(e));
            }
        };
    </script>
}
<div id="silverlightControlHost" style="height:100%">
    <object data="data:application/x-silverlight-2," type="application/x-silverlight-2" width="100%" height="100%">
		<param name="source" value="ClientBin/Main.xap"/>
        <param name="onLoad" value="pluginLoaded"/>
		<param name="onError" value="onSilverlightError" />
		<param name="background" value="white" />
        @if (initParams.Count > 0)
        {
            <param name="initParams" value="@String.Join(",", initParams)" />
        }
        @*<param name="initParams" value="SessionToken=@sessionToken" />*@
		<param name="minRuntimeVersion" value="5.1.20125.0" />
		<param name="autoUpgrade" value="true" />
        <param name="enableHtmlAccess" value="true" />
		<a href="http://go.microsoft.com/fwlink/?LinkID=149156&v=5.1.20125.0" style="text-decoration:none">
 			<img src="http://go.microsoft.com/fwlink/?LinkId=161376" alt="Get Microsoft Silverlight" style="border-style:none"/>
		</a>
	</object><iframe id="_sl_historyFrame" style="visibility:hidden;height:0px;width:0px;border:0px"></iframe>
</div>
