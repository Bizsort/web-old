@{
    Page.Title = String.Format(Resource.Global.Page_TitleFormat, Resource.Community.Directory);
    Layout = "~/_Search.cshtml";
}

@section head {
<script src="~/JS/Common/Geocoder.js" type="text/javascript"></script>
<script type="text/javascript">
    Page = new (SearchView.extend({
        ctor: function () {
            this.ApplicationPage = "/Community/Search";
            var listView = new Controls.Community.ListView();
            SearchView.prototype.ctor.call(this, listView);
            this.List.Entity = "@Resource.Dictionary.community_s";

            $.views.helpers({
                Navigation: Navigation
            });

            this.meta = { //For setTitle
                keywords: ["@Resource.Dictionary.Communities", "@Resource.Dictionary.Community"],
                title: {
                    Category_Location: "@Resource.Community.Communities_in_Category_Location",
                    Category: "@Resource.Community.Communities_in_Category",
                    Location: "@Resource.Community.Communities_in_Location"
                }
            }
        },

        ValidateRequest: function (token) {
            if (token.Action == Model.Session.Action.CommunitySearch && (token.CategoryId > 0 || !String.isNullOrWhiteSpace(token.SearchQuery))) {
                return true;
            }
            else
                return false;
        },

        Initialize: function (options) {
            ReflectMenu(Navigation.Menu.MainItem.ItemType.Scroll, Navigation.Menu.SubItem.ItemType.Scroll_Communities, true);
            SearchView.prototype.Initialize.call(this, options);

            if (this._token.CategoryId > 0) {
                var $this = this;
                this.category.GroupSelected = function (category) {
                    if (category.Id > 0)
                        Navigation.Community.Search(category.Id, !String.isNullOrWhiteSpace($this._token.SearchQuery) ? $this._token.SearchQuery : undefined, Session.User.LocationId, $this._token.SearchNear);
                    else {
                        Session.User.CategoryId = 0;
                        Navigation.Community.Home();
                    }
                };
            }

            this.List.View.ForumsCommand = function (community) {
                if (community.Options.Open_To_View)
                    Navigation.Community.TopicsView(community.Id);
                else if (Session.User.Id > 0) {
                    Admin.Service.Community.Profile.IsMember(community.Id, function (isMember) {
                        if (isMember)
                            Navigation.Community.TopicsView(community.Id);
                    });
                }
            };

            this.List.View.ProductsCommand = function (community) {
                if (community.Options.Post_Products) {
                    if (community.Options.Open_To_View)
                        Navigation.Community.ProductsView(community.Id);
                    else if (Session.User.Id > 0) {
                        Admin.Service.Community.Profile.IsMember(community.Id, function (isMember) {
                            if (isMember)
                                Navigation.Community.ProductsView(community.Id);
                        });
                    }
                }
            };
        },

        ReflectUser: function () {
            Foundation.Page.prototype.ReflectUser.call(this);
            this.Pager.RefreshPage();
        },

        doSearch: function () {
            if (this._token.CategoryId > 0 || !String.isNullOrWhiteSpace(this._token.SearchQuery)) {
                Navigation.Community.Search(this._token.CategoryId, !String.isNullOrWhiteSpace(this._token.SearchQuery) ? this._token.SearchQuery : undefined, this._token.LocationId, this._token.SearchNear);
            }
            else
                Navigation.Community.Home();

            return true;
        },

        fetchList: function (queryInput, callback, faultCallback) {
            SearchView.prototype.fetchList.call(this, queryInput, callback, faultCallback, User.Service.Community.Profile.Search);
        },

        fetchPage: function (page, callback, faultCallback) {
            if (this._distances) {
                var $this = this;
                User.Service.Community.Profile.ToPreview(page, function (communities) {
                    callback($this.preparePage(page, communities, $this._distances, function (community, distance) {
                        community.Distance = String.format("{0}km", distance);
                    }));
                }, faultCallback);
            }
            else
                Community.ListView.prototype.fetchPage.call(this, page, callback, faultCallback);
        }
    }))();
</script>}

@section headerFrame {
<table style="float:left; margin-bottom:5px;">
    <tr>
        <td style="padding-bottom:5px; display:none; ">
            @Resource.Community.Category_Prefix&nbsp;<span class="groupPath" id="category"></span>
        </td>
    </tr>
    <tr>
        <td>
            <table style="float:left;">
                <tr>
                    <td id="searchQuery" style="display:none; text-align:left; float:left; width:auto; padding-bottom:5px; padding-right:10px;">
                        @Resource.Dictionary.Search
                    </td>
                    <td id="searchNear" style="display:none; text-align:left; float:left; width:auto; padding-bottom:5px;">
                        @Resource.Dictionary.Near
                    </td>
                </tr>
            </table>
        </td>
    </tr>
</table>}